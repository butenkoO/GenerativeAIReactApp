provide me js function to sort by name.common
data structure is [{ name: { common: 'Country name'}}]
it should be case insensitive
sort should accept string  ascend or descend where ascend is from A to Z

_____________________________________________________________

Certainly! Here's a JavaScript function that sorts an array of objects based on the name.common property in a case-insensitive manner:

function sortByCommonName(array, order) {
  const sortedArray = array.slice(); // Create a shallow copy of the original array

  sortedArray.sort((a, b) => {
    const nameA = a.name.common.toLowerCase();
    const nameB = b.name.common.toLowerCase();

    if (order === 'ascend') {
      if (nameA < nameB) return -1;
      if (nameA > nameB) return 1;
    } else if (order === 'descend') {
      if (nameA > nameB) return -1;
      if (nameA < nameB) return 1;
    }

    return 0;
  });

  return sortedArray;
}

To use this function, pass in your array of objects and the desired order ('ascend' or 'descend') as arguments. It will return a new array sorted by the name.common property.

Here's an example usage:

const countries = [
  { name: { common: 'Germany' } },
  { name: { common: 'India' } },
  { name: { common: 'United States' } },
  { name: { common: 'China' } }
];

const sortedAscending = sortByCommonName(countries, 'ascend');
console.log(sortedAscending);
// Output: [{ name: { common: 'China' } }, { name: { common: 'Germany' } }, { name: { common: 'India' } }, { name: { common: 'United States' } }]

const sortedDescending = sortByCommonName(countries, 'descend');
console.log(sortedDescending);
// Output: [{ name: { common: 'United States' } }, { name: { common: 'India' } }, { name: { common: 'Germany' } }, { name: { common: 'China' } }]

In the above example, the countries array is sorted in ascending and descending order based on the name.common property.
